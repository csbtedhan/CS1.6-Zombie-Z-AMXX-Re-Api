#include <amxmodx>
#include <fakemeta>
#include <engine>
#include <cstrike>
#include <csm>
#include <fakemeta_util>
#include <hamsandwich>
#include <zombiemodlimited>
#include <explosion>

#define V_MODEL	"models/zbz/v_anyagren.mdl"
#define W_MODEL	"models/zbz/w_anyagren.mdl"

#define Get_BitVar(%1,%2) (%1 & (1 << (%2 & 31)))
#define Set_BitVar(%1,%2) %1 |= (1 << (%2 & 31))
#define UnSet_BitVar(%1,%2) %1 &= ~(1 << (%2 & 31))
new g_HadWpn

public plugin_precache()
{
	engfunc(EngFunc_PrecacheModel, V_MODEL)
	engfunc(EngFunc_PrecacheModel, W_MODEL)
}
public plugin_init()
{
	RegisterHam(Ham_Item_Deploy, "weapon_hegrenade", "fw_Item_Deploy_Post", 1);
	RegisterHam(Ham_Think, "grenade", "fw_Grenade_Think")
	RegisterHam(Ham_Touch, "info_target", "SpitImpact");

	cs_register_custom_item("Anya Grenade", 350, 7, "GiveHolyMo", "anyagren")
}
public GiveHolyMo(id)
{
	cs_remove_item(id, -1, 3)
	Set_BitVar(g_HadWpn, id)
	if(!user_has_weapon(id, CSW_HEGRENADE))
		fm_give_item(id, "weapon_hegrenade")
}

public fw_Remove_Item(id, itemid, slot)
{
	if(slot == 3) UnSet_BitVar(g_HadWpn, id)
}
public fw_Item_Deploy_Post(Ent)
{
	if(pev_valid(Ent) != 2)
		return
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return
		
	if(Get_BitVar(g_HadWpn, Id))
	{
		set_pev(Id, pev_viewmodel2, V_MODEL)
		set_pev(Id, pev_weaponmodel2, "")
	}
}
public fw_CSZB_HumanNade_Pre(Ent, Id)
{
	if(!Get_BitVar(g_HadWpn, Id))
		return 0;
		
	engfunc(EngFunc_SetModel, Ent, W_MODEL)
	set_pev(Ent, pev_impulse, 4239)
	set_pev(Ent, pev_dmgtime, get_gametime() + 2.0);
	return 1;
}
public fw_Grenade_Think(Ent)
{
	if(!pev_valid(Ent) || pev(Ent, pev_impulse) != 4239) 
		return HAM_IGNORED;
		
		
	if(get_gametime() < pev(Ent, pev_dmgtime))
		return HAM_IGNORED;
		
	GrenadeExplode(Ent)
	engfunc(EngFunc_RemoveEntity, Ent)
	return HAM_SUPERCEDE;
}

public GrenadeExplode(Ent)
{
	static Float:vecVelocity[3], Float:vecOrigin[3]; pev(Ent, pev_origin, vecOrigin);
	static pevAttacker; pevAttacker = pev(Ent, pev_owner);
	
	pev(Ent, pev_velocity, vecVelocity)
	CSGrenadeExplosion(vecOrigin, 1, 1, vecVelocity)

	Spit(vecOrigin, pevAttacker)
	static Float:vOrigin[3], Float:flDist, Float:flDamage, pEnt; pEnt= -1
	while((pEnt = engfunc(EngFunc_FindEntityInSphere, pEnt, vecOrigin, 350.0)) != 0 )
	{
		if(!pev_valid(pEnt) || pEnt == pevAttacker)
			continue;
			
		pev(pEnt, pev_origin, vOrigin);
		flDist = vector_distance(vOrigin, vecOrigin);
		flDamage = 100.0 - floatmul(100.0, floatdiv(flDist, 350.0));
		
		if(isBreakable(pEnt) && flDamage <= 0.0) flDamage = floatdiv(100.0, 2.0)
		
		if(flDamage > 0.0 && pev(pEnt, pev_health) > 0.0 && pev(pEnt, pev_takedamage) > 0.0)
			ExecuteHamB(Ham_TakeDamage, pEnt, Ent, pevAttacker, flDamage, isBreakable(pEnt) ? DMG_BLAST : (1<<24));
	}
}
public Spit(Float:vOrigin[3], Attacker)
{
	new pEnt, OnGround, Float:vGround[3], Float:pOrigin[3], Float:vAngle[3], Float:vVelocity[3];

	vGround = vOrigin
	vGround[2] -= 132.0
	
	engfunc(EngFunc_TraceLine, vOrigin, vGround, 0, 0, 0);
	if(get_tr2(0, TR_flFraction) < 1.0) OnGround = 1

	for(new x=0; x<13;x++)
	{
		pOrigin[0] = vOrigin[0] + random_float(-50.0, 50.0)
		pOrigin[1] = vOrigin[1] + random_float(-50.0, 50.0)
		pOrigin[2] = vOrigin[2] + random_float(OnGround ? 1.0 : -50.0, 50.0)

		pEnt = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		dllfunc(DLLFunc_Spawn, pEnt)
		set_pev(pEnt, pev_origin, vOrigin);
		set_pev(pEnt, pev_classname, "anyabomb")
		engfunc(EngFunc_SetModel, pEnt, "models/w_hegrenade.mdl");
		set_pev(pEnt, pev_owner, Attacker);
		set_pev(pEnt, pev_movetype, 6);
		set_pev(pEnt, pev_solid, SOLID_TRIGGER);
		set_pev(pEnt, pev_gravity, 0.6)
		set_pev(pEnt, pev_rendermode, kRenderTransAlpha);
		set_pev(pEnt, pev_renderamt, 0.0);
		set_pev(pEnt, pev_mins, Float:{-1.0, -1.0, -1.0}, Float:{1.0, 1.0, 1.0})
			
		vVelocity[0] = random_float(-780.0, 780.0);
		vVelocity[1] = random_float(-780.0, 780.0);
		vVelocity[2] = random_float(OnGround ? 0.0 : -780.0, 780.0);
		set_pev(pEnt, pev_velocity, vVelocity);
		vector_to_angle(vVelocity, vAngle);
		set_pev(pEnt, pev_angles, vAngle);
			
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_BEAMFOLLOW)
		write_short(pEnt)
		write_short(engfunc(EngFunc_ModelIndex, "sprites/smoke.spr"))
		write_byte(15)
		write_byte(2)
		write_byte(random_num(80,255))
		write_byte(random_num(80,255))
		write_byte(random_num(80,255))
		write_byte(255)
		message_end()
	}
	
}

public SpitImpact(Ent, Id)
{
	if(!isSpit(Ent) || isSpit(Id)) return;
	
	new Float:vOrigin[3], pevAttacker = pev(Ent, pev_owner);
	pev(Ent, pev_origin, vOrigin);
	
	if(engfunc(EngFunc_PointContents, vOrigin) != CONTENTS_SKY)
	{
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(3)
		engfunc(EngFunc_WriteCoord, vOrigin[0])
		engfunc(EngFunc_WriteCoord, vOrigin[1])
		engfunc(EngFunc_WriteCoord, vOrigin[2])
		write_short(engfunc(EngFunc_ModelIndex, "sprites/eexplo.spr"))
		write_byte(random(5)+25)
		write_byte(30)
		write_byte(0)
		message_end()
	}
	
	static Float:pOrigin[3], Float:flDist, Float:flDamage, pEnt; pEnt= -1
	while((pEnt = engfunc(EngFunc_FindEntityInSphere, pEnt, vOrigin, 250.0)) != 0 )
	{
		if(!pev_valid(pEnt) || pEnt == pevAttacker)
			continue;
			
		pev(pEnt, pev_origin, pOrigin);
		flDist = vector_distance(vOrigin, pOrigin);
		flDamage = 500.0 - floatmul(500.0, floatdiv(flDist, 350.0));
		
		if(isBreakable(pEnt) && flDamage <= 0.0) flDamage = floatdiv(500.0, 2.0)
		
		if(flDamage > 0.0 && pev(pEnt, pev_health) > 0.0 && pev(pEnt, pev_takedamage) > 0.0)
			ExecuteHamB(Ham_TakeDamage, pEnt, Ent, pevAttacker, flDamage, isBreakable(pEnt) ? DMG_BLAST : DMG_MORTAR);
	}

	engfunc(EngFunc_RemoveEntity, Ent)
}
stock isSpit(iEnt)
{
	if (!pev_valid(iEnt)) return 0;
	
	new szClassname[32]
	pev(iEnt, pev_classname, szClassname, charsmax(szClassname))
	if (equal(szClassname, "anyabomb")) return 1;
	return 0;
}
stock isBreakable(iEnt)
{
	if (!pev_valid(iEnt)) return 0;
	
	new szClassname[32]
	pev(iEnt, pev_classname, szClassname, charsmax(szClassname))

	if (equal(szClassname, "func_breakable") || equal(szClassname, "func_pushable")) return 1;
	return 0;
}
