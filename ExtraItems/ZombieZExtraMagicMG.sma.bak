#include <amxmodx>
#include <fakemeta>
#include <engine>
#include <cstrike>
#include <csm>
#include <fakemeta_util>
#include <hamsandwich>
#include <zombiemodlimited>

#define V_MODEL "models/x/v_magicmgs.mdl"
#define P_MODEL "models/x/p_magicmg.mdl"
#define W_MODEL "models/x/w_primgroup2.mdl"

#define CSW_MAGICMG CSW_M249
#define weapon_magicmg "weapon_m249"

#define Get_BitVar(%1,%2) (%1 & (1 << (%2 & 31)))
#define Set_BitVar(%1,%2) %1 |= (1 << (%2 & 31))
#define UnSet_BitVar(%1,%2) %1 &= ~(1 << (%2 & 31))
new g_HadWpn

new const WeaponSounds[][] = 
{
	"weapons/magicmg-1.wav",
	"weapons/magicmg-2.wav",
	"weapons/magicmg_1exp.wav",
	"weapons/magicmg_2exp.wav"
}

public plugin_precache()
{
	for(new x = 0; x < sizeof(WeaponSounds); x++)
		engfunc(EngFunc_PrecacheSound, WeaponSounds[x]);
	
	engfunc(EngFunc_PrecacheModel, V_MODEL)
	engfunc(EngFunc_PrecacheModel, P_MODEL)
	engfunc(EngFunc_PrecacheModel, W_MODEL)
	
	engfunc(EngFunc_PrecacheSound, "vox/zbz_miho/shiningheartrod.wav")
	engfunc(EngFunc_PrecacheSound, "vox/zbz_shiho/shiningheartrod.wav")
	
	engfunc(EngFunc_PrecacheModel, "sprites/ef_magicmgmissile1.spr")
	engfunc(EngFunc_PrecacheModel, "sprites/ef_magicmgmissile2.spr")
	engfunc(EngFunc_PrecacheModel, "sprites/ef_magicmgexplo.spr")
	engfunc(EngFunc_PrecacheModel, "sprites/ef_magicmgexplo2.spr")
}
public plugin_init()
{
	register_forward(FM_SetModel, "fw_SetModel")
	register_forward(FM_UpdateClientData,"fw_UpdateClientData_Post", 1)
	
	RegisterHam(Ham_Think, "info_target", "BallThink")
	RegisterHam(Ham_Touch, "info_target", "BallImpact")
	
	RegisterHam(Ham_Weapon_PrimaryAttack, weapon_magicmg, "fw_PrimaryAttack");
	RegisterHam(Ham_Item_Deploy, weapon_magicmg, "fw_Item_Deploy_Post", 1);
	RegisterHam(Ham_Item_Holster, weapon_magicmg, "fw_Item_Holster", 1);
	RegisterHam(Ham_Item_AddToPlayer, weapon_magicmg, "fw_Item_AddToPlayer_Post", 1);
	RegisterHam(Ham_Item_PostFrame, weapon_magicmg, "fw_Item_PostFrame");	
	RegisterHam(Ham_Weapon_Reload, weapon_magicmg, "fw_Weapon_Reload");
	RegisterHam(Ham_Weapon_Reload, weapon_magicmg, "fw_Weapon_Reload_Post", 1);	
	
	cs_register_custom_item("Shining Heart Rod", 6500, 6, "GiveMagicMg", "magicmg")
}

public GiveMagicMg(id)
{
	if(!is_user_alive(id)) return;
	
	drop_weapons(id, 1)
	
	Set_BitVar(g_HadWpn,id)
	fm_give_item(id, "weapon_m249")
}
public fw_Remove_Item(id, itemid, slot)
{
	if(slot == 0)
	{
		if(Get_BitVar(g_HadWpn,id))
			update_specialammo(id,1, 0)
			
		UnSet_BitVar(g_HadWpn,id)
	}
}
public client_disconnected(id)
{
	UnSet_BitVar(g_HadWpn,id)
}
public fw_SetModel(entity, model[])
{
	if(!pev_valid(entity))
		return FMRES_IGNORED
	
	static Classname[32]
	pev(entity, pev_classname, Classname, sizeof(Classname))
	
	if(!equal(Classname, "weaponbox"))
		return FMRES_IGNORED
	
	static iOwner
	iOwner = pev(entity, pev_owner)
	
	if(equal(model, "models/w_m249.mdl"))
	{
		static weapon; weapon = find_ent_by_owner(-1, weapon_magicmg, entity)
		if(Get_BitVar(g_HadWpn, iOwner) && pev_valid(weapon))
		{
			update_specialammo(iOwner,1, 0)
			set_pev(weapon, pev_impulse, 24175) 
			engfunc(EngFunc_SetModel, entity, W_MODEL)
			UnSet_BitVar(g_HadWpn,iOwner)
			set_pev(entity, pev_body, 2);
			return FMRES_SUPERCEDE
		}
	}

	return FMRES_IGNORED;
}
public fw_UpdateClientData_Post(id, sendweapons, cd_handle)
{
	if(!is_user_alive(id))
		return FMRES_IGNORED	
	if(get_user_weapon(id) == CSW_MAGICMG && Get_BitVar(g_HadWpn, id))
		set_cd(cd_handle, CD_flNextAttack, get_gametime() + 0.001) 
	
	return FMRES_HANDLED
}

public fw_PrimaryAttack(Ent)
{
	if(pev_valid(Ent) != 2)
		return HAM_IGNORED
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, Id))
		return HAM_IGNORED
		
	if(get_pdata_int(Ent, 51, 4) <= 0)
		return HAM_IGNORED
		
	ShotBall(Id, 0)
		
	new Float:recoil[3]; recoil[0] = random_float(-2.0, 1.0)
	set_pev(Id, pev_punchangle, recoil);
	
	Stock_SetPlayerAnim(Id, "shoot_m249")
	
	set_pdata_float(Ent, 46, 0.2, 4);
	set_pdata_float(Ent, 47, 0.2, 4);
	set_pdata_float(Ent, 48, 1.2, 4);
	Set_WeaponAnim(Id, random_num(4,5))
	emit_sound(Id, CHAN_WEAPON, WeaponSounds[0], 1.0, 0.6, 0, PITCH_NORM)
	set_pdata_int(Ent, 51, get_pdata_int(Ent, 51, 4) - 1, 4);
		
	return HAM_SUPERCEDE;
}

public fw_Item_AddToPlayer_Post(Ent, id)
{
	if(!pev_valid(Ent))
		return HAM_IGNORED
		
	if(pev(Ent, pev_impulse) == 24175)
	{
		Set_BitVar(g_HadWpn, id)
		set_pev(Ent, pev_iuser3, 0);
		set_pev(Ent, pev_impulse, 0)	
	}
		
	return HAM_HANDLED
}

public fw_Item_PostFrame(ent)
{
	static id; id = pev(ent, pev_owner)
	if(!is_user_alive(id))
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, id))
		return HAM_IGNORED	
	
	if(get_user_button(id) & IN_ATTACK2 && get_pdata_float(ent, 47, 4) <= 0.0 && pev(ent, pev_iuser2)==1 && pev(ent, pev_iuser3)==0)
	{
		new szMdl[32]; pl_get_user_model(id, szMdl, 31);
		
		set_pev(ent, pev_iuser3, 1);
		set_pdata_float(ent, 46, 0.85, 4);
		set_pdata_float(ent, 47, 0.85, 4);
		set_pdata_float(ent, 48, 1.85, 4);
		Set_WeaponAnim(id, 6);
		
		engfunc(EngFunc_EmitSound, id, CHAN_WEAPON, WeaponSounds[1], 1.0, 0.7, 0, 100);
		if(equal(szMdl, "buffclass19s3ct") || equal(szMdl, "zbz_miho"))
			engfunc(EngFunc_EmitSound, id, CHAN_VOICE, "vox/zbz_miho/shiningheartrod.wav", 1.0, 0.8, 0, 100);
		if(equal(szMdl, "buffclass19s3tr") || equal(szMdl, "zbz_shiho"))
			engfunc(EngFunc_EmitSound, id, CHAN_VOICE, "vox/zbz_shiho/shiningheartrod.wav", 1.0, 0.8, 0, 100);
	}
	
	if(get_pdata_float(ent, 47, 4) <= 0.0 && pev(ent, pev_iuser2)==1 && pev(ent, pev_iuser3)==1)
	{
		Stock_SetPlayerAnim(id, "shoot_m249")
		ShotBall(id, 1);
		set_pev(ent, pev_iuser2, 0);
		set_pev(ent, pev_iuser3, 0);
		set_pev(ent, pev_iuser4, 0);
		update_specialammo(id,1, 0)
	}
	
	static Float:flNextAttack; flNextAttack = get_pdata_float(id, 83, 5)
	static bpammo; bpammo = cs_get_user_bpammo(id, CSW_MAGICMG)

	static iClip; iClip = get_pdata_int(ent, 51, 4)
	static fInReload; fInReload = get_pdata_int(ent, 54, 4)
	
	if(fInReload && flNextAttack <= 0.0)
	{
		static temp1
		temp1 = min(100 - iClip, bpammo)

		set_pdata_int(ent, 51, iClip + temp1, 4)
		cs_set_user_bpammo(id, CSW_MAGICMG, bpammo - temp1)
		
		set_pdata_int(ent, 54, 0, 4)
		
		fInReload = 0
	}		
	
	return HAM_IGNORED
}

public fw_Weapon_Reload(ent)
{
	static id; id = pev(ent, pev_owner)
	if(!is_user_alive(id))
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, id))
		return HAM_IGNORED	
		
	set_pev(ent, pev_iuser1, -1)
	
	static BPAmmo; BPAmmo = cs_get_user_bpammo(id, CSW_MAGICMG)
	static iClip; iClip = get_pdata_int(ent, 51, 4)
		
	if(BPAmmo <= 0)
		return HAM_SUPERCEDE
	if(iClip >= 100)
		return HAM_SUPERCEDE			
	
	set_pev(ent, pev_iuser1, iClip)
	return HAM_HANDLED
}

public fw_Weapon_Reload_Post(ent)
{
	static id; id = pev(ent, pev_owner)
	if(!is_user_alive(id))
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, id))
		return HAM_IGNORED	
		
	if((get_pdata_int(ent, 54, 4) == 1))
	{ // Reload
		if(pev(ent, pev_iuser1) == -1)
			return HAM_IGNORED;
		set_pdata_float(id, 83, 2.0, 5)
		Set_WeaponAnim(id, 2)
		set_pev(ent, pev_iuser3, 0);
	}
	
	return HAM_HANDLED
}
public fw_Item_Holster(Ent)
{
	if(pev_valid(Ent) != 2)
		return
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return
		
	update_specialammo(Id,1, 0)
	set_pev(Ent, pev_iuser3, 0);
}
public fw_Item_Deploy_Post(Ent)
{
	if(pev_valid(Ent) != 2)
		return
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return
	if(!Get_BitVar(g_HadWpn, Id))
		return
	set_pev(Id, pev_viewmodel2, V_MODEL)
	set_pev(Id, pev_weaponmodel2, P_MODEL)
	
	Set_WeaponAnim(Id, 3);
	set_pev(Ent, pev_iuser3, 0);
	
	if(pev(Ent, pev_iuser2) == 1)
		update_specialammo(Id, 1, 1)
}

public ShotBall(id, iMode)
{
	new iEnt = create_entity("info_target")
	
	static Float:Origin[3], Float:vVelocity[3], Float:pVelocity[3];
	pev(id, pev_velocity, pVelocity)
	
	Stock_Get_Postion(id, 0.0, 0.0, -1.0, Origin)
	
	set_pev(iEnt, pev_classname, "magicmg_missile")
	set_pev(iEnt, pev_movetype, MOVETYPE_FLY)
	engfunc(EngFunc_SetModel, iEnt, iMode ? "sprites/ef_magicmgmissile2.spr" : "sprites/ef_magicmgmissile1.spr")
	
	entity_set_size(iEnt, Float:{-1.0, -1.0, -1.0}, Float:{1.0, 1.0, 1.0})
	set_pev(iEnt, pev_origin, Origin)
	set_pev(iEnt, pev_gravity, 0.6)
	
	set_pev(iEnt, pev_solid, SOLID_BBOX)
	set_pev(iEnt, pev_owner, id)
	set_pev(iEnt, pev_iuser1, iMode)
	
	velocity_by_aim(id, iMode ? 650 : 1000, vVelocity)
	xs_vec_add(pVelocity, vVelocity, vVelocity);
	set_pev(iEnt, pev_velocity, vVelocity)	
	
	if(!iMode)
	{
		static Float:Angle[3]; Angle[2] = random(5) > 3 ? -500.0 : 500.0;
		set_pev(iEnt, pev_avelocity, Angle);
	}
	set_pev(iEnt, pev_scale, iMode ? 1.0 : 0.35);
	set_pev(iEnt, pev_rendermode, kRenderTransAdd)
	set_pev(iEnt, pev_renderamt, 100.0)
	set_pev(iEnt, pev_frame, 0.0);
	set_pev(iEnt, pev_nextthink, get_gametime() + 0.1);
}
public BallThink(Ent)
{
	if(!isMagicBall(Ent)) return;
	
	new Float:flFrame; pev(Ent, pev_frame, flFrame);
	flFrame += 1.0;
	if(flFrame > 14.0) flFrame = 0.0;
	set_pev(Ent, pev_frame, flFrame);
	
	set_pev(Ent, pev_nextthink, get_gametime() + 0.1);
}
public BallImpact(Ent, id)
{
	if(!isMagicBall(Ent)) return;
	
	static Float:pOrigin[3]; pev(Ent, pev_origin, pOrigin);
	new iMode, pevAttacker = pev(Ent, pev_owner)
	iMode = pev(Ent, pev_iuser1)
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_EXPLOSION)
	engfunc(EngFunc_WriteCoord, pOrigin[0])
	engfunc(EngFunc_WriteCoord, pOrigin[1])
	engfunc(EngFunc_WriteCoord, pOrigin[2])
	write_short(engfunc(EngFunc_ModelIndex, iMode ? "sprites/ef_magicmgexplo2.spr" : "sprites/ef_magicmgexplo.spr"))
	write_byte(10)
	write_byte(30)
	write_byte(14)
	message_end()
	
	engfunc(EngFunc_EmitAmbientSound, 0, pOrigin, iMode ? WeaponSounds[3] : WeaponSounds[2], 1.0, 0.6, 0, 100);
	
	if(Damaging(pevAttacker, Ent, pOrigin, iMode ? 350.0 : 80.0, iMode ? 2575.0 : 250.0) == 1 && !iMode && is_user_connected(pevAttacker))
	{
		new wpn = find_ent_by_owner(-1, weapon_magicmg, pevAttacker)
		if(pev_valid(wpn) && Get_BitVar(g_HadWpn, pevAttacker) && pev(wpn, pev_iuser2) == 0)
		{
			set_pev(wpn, pev_iuser4, pev(wpn, pev_iuser4) + 1)
			if(pev(wpn, pev_iuser4) >= 30)
			{
				set_pev(wpn, pev_iuser2, 1);
				if(get_pdata_cbase(pevAttacker, 373)==wpn)
					update_specialammo(pevAttacker, 1, 1)
			}
		}
	}
	engfunc(EngFunc_RemoveEntity, Ent);
}

public Damaging(pevAttacker, Inflictor, Float:vOrigin[3], Float:flRadius, Float:flDamage)
{
	if(cs_zb_is_zombie(pevAttacker) || !is_user_connected(pevAttacker)) return 0;
	
	static Float:pOrigin[3], iHitPlayer, pEnt; pEnt = -1
	iHitPlayer = 0;
	while((pEnt = engfunc(EngFunc_FindEntityInSphere, pEnt, vOrigin, flRadius)) != 0)
	{
		if(!pev_valid(pEnt)) continue;
		
		pev(pEnt, pev_origin, pOrigin)
		if(!isClearLine(pOrigin, vOrigin)) flDamage *= 0.6;
		
		if(pev(pEnt, pev_health) > 0.0 && pev(pEnt, pev_takedamage) > 0.0)
			ExecuteHamB(Ham_TakeDamage, pEnt, Inflictor, pevAttacker, flDamage, isBreakable(pEnt) ? DMG_BLAST : DMG_CLUB);
		
		if(cs_zb_is_zombie(pEnt) && is_user_alive(pEnt))
		{
			Stock_MakeKnockback(pEnt, pOrigin, vOrigin, vector_distance(pOrigin, vOrigin), flDamage * 0.65);
			iHitPlayer = 1
		}
	}
	return iHitPlayer
}
public update_specialammo(id, Ammo, On)
{
	new AmmoSprites[33]
	format(AmmoSprites, sizeof(AmmoSprites), "number_%d", Ammo)
  	
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("StatusIcon"), {0,0,0}, id)
	write_byte(On)
	write_string(AmmoSprites)
	write_byte(42) // red
	write_byte(212) // green
	write_byte(255) // blue
	message_end()
}

stock Stock_SetPlayerAnim(id, const AnimName[], Float:rate=1.0)
{
	static AnimNum, Float:FrameRate, Float:GroundSpeed, bool:Loops, Anim2[64]
	if(!(pev(id, pev_flags) & FL_DUCKING)) format(Anim2, 63, "ref_%s", AnimName)
	else format(Anim2, 63, "crouch_%s", AnimName)

	if ((AnimNum=lookup_sequence(id,Anim2,FrameRate,Loops,GroundSpeed))==-1) AnimNum=0
	
	if (!Loops || (Loops && pev(id,pev_sequence)!=AnimNum))
	{
		set_pev(id, pev_gaitsequence, AnimNum)
		set_pev(id, pev_sequence, AnimNum)
		set_pev(id, pev_frame, 0.0)
		set_pev(id, pev_animtime, get_gametime())
	}
	set_pev(id, pev_framerate, rate)

	set_pdata_int(id, 40, Loops, 4)
	set_pdata_int(id, 39, 0, 4)

	set_pdata_float(id, 36, FrameRate, 4)
	set_pdata_float(id, 37, GroundSpeed, 4)
	set_pdata_float(id, 38, get_gametime(), 4)

	set_pdata_int(id, 73, 28, 5)
	set_pdata_int(id, 74, 28, 5)
	set_pdata_float(id, 220, get_gametime(), 5)
}
stock Stock_MakeKnockback(iEnt, Float:fEntOrigin[3], Float:fPoint[3], Float:fDistance, Float:fDamage)
{
	new Float:fTime = floatdiv(fDistance, fDamage)
	new Float:fVelocity[3], Float:fEntVelocity[3];
	pev(iEnt, pev_velocity, fEntVelocity);
	fVelocity[0] = floatdiv((fEntOrigin[0] - fPoint[0]), fTime)
	fVelocity[1] = floatdiv((fEntOrigin[1] - fPoint[1]), fTime)
	fVelocity[2] = floatdiv((fEntOrigin[2] - fPoint[2]), fTime)
	xs_vec_add(fEntVelocity, fVelocity, fVelocity);
	set_pev(iEnt, pev_velocity, fVelocity)
	return 1
}
stock isClearLine(Float:vOrigin1[3], Float:vOrigin2[3])
{
	new Float:flFraction;
	engfunc(EngFunc_TraceLine, vOrigin1, vOrigin2, IGNORE_MONSTERS|IGNORE_GLASS, 0, 0);
	get_tr2(0, TR_flFraction, flFraction)
	
	if (flFraction < 1.0) return 0;

	return 1;
}
stock isBreakable(iEnt)
{
	if (!pev_valid(iEnt)) return 0;
	
	static szClassname[32]
	pev(iEnt, pev_classname, szClassname, charsmax(szClassname))
	if (pev(iEnt, pev_spawnflags) & SF_BREAK_TRIGGER_ONLY) return 0;
	if (equal(szClassname, "func_breakable") || equal(szClassname, "func_pushable")) return 1;
	return 0;
}
stock isMagicBall(iEnt)
{
	if (!pev_valid(iEnt)) return 0;
	
	new szClassname[32]
	pev(iEnt, pev_classname, szClassname, charsmax(szClassname))
	if (equal(szClassname, "magicmg_missile")) return 1;
	return 0;
}
stock Set_WeaponAnim(id, anim)
{
	set_pev(id, pev_weaponanim, anim)
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, {0, 0, 0}, id)
	write_byte(anim)
	write_byte(0)
	message_end()
}

stock Stock_Get_Postion(id,Float:forw,Float:right, Float:up,Float:vStart[])
{
	static Float:vOrigin[3], Float:vAngle[3], Float:vForward[3], Float:vRight[3], Float:vUp[3]
	
	pev(id, pev_origin, vOrigin)
	pev(id, pev_view_ofs,vUp) //for player
	xs_vec_add(vOrigin,vUp,vOrigin)
	pev(id, pev_v_angle, vAngle) // if normal entity ,use pev_angles
	
	angle_vector(vAngle,ANGLEVECTOR_FORWARD,vForward) //or use EngFunc_AngleVectors
	angle_vector(vAngle,ANGLEVECTOR_RIGHT,vRight)
	angle_vector(vAngle,ANGLEVECTOR_UP,vUp)
	
	vStart[0] = vOrigin[0] + vForward[0] * forw + vRight[0] * right + vUp[0] * up
	vStart[1] = vOrigin[1] + vForward[1] * forw + vRight[1] * right + vUp[1] * up
	vStart[2] = vOrigin[2] + vForward[2] * forw + vRight[2] * right + vUp[2] * up
} 
stock drop_weapons(id, dropwhat)
{
	// Get user weapons
	static weapons[32], num, i, weaponid
	num = 0 // reset passed weapons count (bugfix)
	get_user_weapons(id, weapons, num)
	
	const PRIMARY_WEAPONS_BIT_SUM = (1<<CSW_SCOUT)|(1<<CSW_XM1014)|(1<<CSW_MAC10)|(1<<CSW_AUG)|(1<<CSW_UMP45)|(1<<CSW_SG550)|(1<<CSW_GALIL)|(1<<CSW_FAMAS)|(1<<CSW_AWP)|(1<<CSW_MP5NAVY)|(1<<CSW_M249)|(1<<CSW_M3)|(1<<CSW_M4A1)|(1<<CSW_TMP)|(1<<CSW_G3SG1)|(1<<CSW_SG552)|(1<<CSW_AK47)|(1<<CSW_P90)
	const SECONDARY_WEAPONS_BIT_SUM = (1<<CSW_P228)|(1<<CSW_ELITE)|(1<<CSW_FIVESEVEN)|(1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)

	// Loop through them and drop primaries or secondaries
	for (i = 0; i < num; i++)
	{
		// Prevent re-indexing the array
		weaponid = weapons[i]
		
		if ((dropwhat == 1 && ((1<<weaponid) & PRIMARY_WEAPONS_BIT_SUM)) || (dropwhat == 2 && ((1<<weaponid) & SECONDARY_WEAPONS_BIT_SUM)))
		{
			// Get weapon entity
			static wname[32]; get_weaponname(weaponid, wname, charsmax(wname))
			engclient_cmd(id, "drop", wname)
		}
	}
}
