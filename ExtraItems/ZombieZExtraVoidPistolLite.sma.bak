#include <amxmodx>
#include <fakemeta>
#include <engine>
#include <cstrike>
#include <csm>
#include <fakemeta_util>
#include <hamsandwich>
#include <zombiemodlimited>
#include <reapi>

#define CSW_VOIDPISTOL CSW_DEAGLE
#define weapon_voidpistol "weapon_deagle"

#define VOIDPISTOL_DAMAGE	95.0
#define BLACKHOLE_DAMAGE	180.0
#define VOIDPISTOL_RADIUS	650.0
#define BLACKHOLE_RADIUS	400.0

new const szVoidModels[3][] = { "models/x/p_voidpistol.mdl" , "models/x/v_voidpistol.mdl" , "models/x/w_secgroup1.mdl" }
new const TRACER_ENTITY[][]={ "info_target", "func_breakable", "func_pushable", "func_wall", "func_wall_toggle", "func_door", "func_door_rotating", "weaponbox",
		"func_button", "func_conveyor", "hostage_entity", "func_tank", "func_tankmortar", "func_tanklaser", "func_tankrocket", "button_target"  , "func_train" , "func_tracktrain", "func_vehicle"}
		
new const WeaponSounds[][] =
{
	"weapons/voidpistol-1.wav",
	"weapons/voidpistol-2.wav",
	"weapons/voidpistol_blackhole_start.wav",
	"weapons/voidpistol_blackhole_idle.wav",
	"weapons/voidpistol_blackhole_exp.wav",
	"weapons/voidpistol_beep.wav"
}

new const szProjectileModel[][] = 
{
	"models/x/ef_blackhole.mdl",
	"models/x/ef_blackhole_projectile.mdl",
	"sprites/ef_blackhole_loop.spr",
	"sprites/ef_blackhole_end.spr",
	"sprites/ef_blackhole_start.spr"
}
#define Get_BitVar(%1,%2) (%1 & (1 << (%2 & 31)))
#define Set_BitVar(%1,%2) %1 |= (1 << (%2 & 31))
#define UnSet_BitVar(%1,%2) %1 &= ~(1 << (%2 & 31))
new g_HadWpn, g_Attack, g_Event
public plugin_precache()
{
	for( new i = 0 ; i < 3 ; i ++ )
	{
		engfunc(EngFunc_PrecacheModel, szVoidModels[i])
	}
	for( new i = 0 ; i < sizeof szProjectileModel ; i ++ )
	{
		engfunc(EngFunc_PrecacheModel, szProjectileModel[i])
	}
	
	engfunc(EngFunc_PrecacheModel, "sprites/ef_blackhole_star.spr")
	
	register_forward(FM_PrecacheEvent, "fw_PrecacheEvent_Post", 1)
	for(new i = 0; i < sizeof(WeaponSounds); i++)
		precache_sound(WeaponSounds[i])
}
public plugin_init()
{
	register_plugin("[Zombie Z] CSO Void Avenger Lite", "1.0L", "csbtedhan");
	
	register_forward(FM_SetModel, "fw_SetModel")
	register_forward(FM_UpdateClientData,"fw_UpdateClientData_Post", 1)	
	register_forward(FM_PlaybackEvent, "fw_PlaybackEvent")
	
	RegisterHam(Ham_TraceAttack, "player", "HamF_TakeDamage", 1)
		
	RegisterHam(Ham_TraceAttack, "worldspawn", "fw_TraceAttack")
	for(new i=0; i<sizeof(TRACER_ENTITY); i++)
		RegisterHam(Ham_TraceAttack, TRACER_ENTITY[i], "fw_TraceAttack")
		
	RegisterHam(Ham_Weapon_PrimaryAttack, weapon_voidpistol, "fw_PrimaryAttack");
	RegisterHam(Ham_Weapon_PrimaryAttack, weapon_voidpistol, "fw_PrimaryAttack_Post", 1);
	RegisterHam(Ham_Item_Deploy, weapon_voidpistol, "fw_Item_Deploy_Post", 1);
	RegisterHam(Ham_Item_AddToPlayer, weapon_voidpistol, "fw_Item_AddToPlayer_Post", 1);
	RegisterHam(Ham_Item_PostFrame, weapon_voidpistol, "fw_Item_PostFrame");
	RegisterHam(Ham_Weapon_Reload, weapon_voidpistol, "fw_Weapon_Reload");	
	RegisterHam(Ham_Weapon_Reload, weapon_voidpistol, "fw_Weapon_Reload_Post", 1);	
	RegisterHam(Ham_Weapon_WeaponIdle, weapon_voidpistol, "fw_Weapon_WeaponIdle")
	
	RegisterHam(Ham_Think, "info_target", "BlackHoleThink")
	RegisterHam(Ham_Touch, "info_target", "BlackHoleImpact")
	
	register_message(get_user_msgid("DeathMsg"), "message_DeathMsg")
	
	cs_register_custom_item("Void Avenger", 2500, 1, "GiveVoid", "voidpistol")
}
public fw_PrecacheEvent_Post(type, const name[])
	if(equal("events/deagle.sc", name)) g_Event = get_orig_retval()

public GiveVoid(id)
{
	if(!is_user_alive(id)) return;
	
	drop_weapons(id, 2)
	
	Set_BitVar(g_HadWpn,id)
	UnSet_BitVar(g_Attack,id)
	fm_give_item(id, "weapon_deagle")
	
	new iWpn = find_ent_by_owner(-1, "weapon_deagle", id)
	if(pev_valid(iWpn) && get_pdata_int(iWpn, 43) == CSW_VOIDPISTOL)
		set_pdata_int(iWpn, 51, 50);
}	

public message_DeathMsg()
{
	// get value data
	static id, weapon[32]
	id = get_msg_arg_int(1)
	get_msg_arg_string(4, weapon, charsmax(weapon))
	
	if(equal(weapon, "deagle") || equal(weapon, "blackhole_projectile"))
	{
		if(Get_BitVar(g_HadWpn,id)) set_msg_arg_string(4, "voidpistol")
	}
		
	return PLUGIN_CONTINUE
}
public fw_Remove_Item(id, itemid, slot)
{
	if(slot == 1)
	{
		UnSet_BitVar(g_HadWpn,id)
		UnSet_BitVar(g_Attack,id)
	}
}
public fw_CSPlayer_Kill(victim, attacker)
{
	if(Get_BitVar(g_HadWpn, victim))
	{
		set_task(0.1, "fw_Remove_Weapon", victim + 2025)
	}
}
public fw_Remove_Weapon(id)
{
	id -= 2025
	UnSet_BitVar(g_HadWpn, id)
}
public HamF_TakeDamage(iVictim, iAttacker, Float:fDamage, Float:Direction[3], Ptr,  iDamageType)
{	
	if(!is_user_connected(iAttacker) || !Get_BitVar(g_HadWpn, iAttacker) || get_user_weapon(iAttacker) != CSW_VOIDPISTOL) 
		return HAM_IGNORED;
	
	if(Get_BitVar(g_Attack, iAttacker) && is_user_alive(iVictim) && cs_zb_is_zombie(iVictim))
	{
		static Float:flEnd[3], Float:vecPlane[3], Float:vDir[3]
		xs_vec_mul_scalar(vecPlane, 3.0, vDir)
		get_tr2(Ptr, TR_vecEndPos, flEnd)
		xs_vec_add(flEnd, vDir, flEnd)
		MakeEffect(flEnd, vecPlane)
		
		SetHamParamFloat(3, VOIDPISTOL_DAMAGE);
		new iWpn = get_pdata_cbase(iAttacker, 373);
		if(pev_valid(iWpn))
		{
			set_pev(iWpn, pev_iuser1, pev(iWpn, pev_iuser1) + 1)
			if(pev(iWpn, pev_iuser1) >= 80 && pev(iWpn, pev_iuser2) != 2)
			{
				Set_WeaponAnim(iAttacker, pev(iWpn, pev_iuser2) ? 14 : 13)
				set_pev(iWpn, pev_iuser2, 2)
				set_pdata_float(iWpn, 48, 1.0, 4);
			}
		}
		return HAM_HANDLED
	}
		
	return HAM_IGNORED;
}
public fw_TraceAttack(Victim, Attacker, Float:Damage, Float:Direction[3], Ptr, DamageBits)
{
	if(!is_user_connected(Attacker))
		return HAM_IGNORED	
	if(get_user_weapon(Attacker) != CSW_VOIDPISTOL || !Get_BitVar(g_HadWpn, Attacker))
		return HAM_IGNORED
		
	static Float:flEnd[3], Float:vecPlane[3], Float:vDir[3], pHit
		
	get_tr2(Ptr, TR_vecEndPos, flEnd)
	get_tr2(Ptr, TR_vecPlaneNormal, vecPlane)
	get_tr2(Ptr, TR_pHit, pHit)
			
	Make_BulletHole(flEnd, pHit)
	
	xs_vec_mul_scalar(vecPlane, 3.0, vDir)
	xs_vec_add(flEnd, vDir, flEnd)
	MakeEffect(flEnd, vecPlane)
	
	return HAM_IGNORED
}
public fw_SetModel(entity, model[])
{
	if(!pev_valid(entity))
		return FMRES_IGNORED
	
	static Classname[32]
	pev(entity, pev_classname, Classname, sizeof(Classname))
	
	if(!equal(Classname, "weaponbox"))
		return FMRES_IGNORED
	
	static iOwner
	iOwner = pev(entity, pev_owner)
	
	if(equal(model, "models/w_deagle.mdl"))
	{
		static weapon; weapon = find_ent_by_owner(-1, weapon_voidpistol, entity)
		if(pev_valid(weapon))
		{
			if(Get_BitVar(g_HadWpn, iOwner))
			{
				set_pev(weapon, pev_impulse, 2561) 
				engfunc(EngFunc_SetModel, entity, szVoidModels[2])
				set_pev(entity, pev_body, 6)
				
				UnSet_BitVar(g_HadWpn,iOwner)
				UnSet_BitVar(g_Attack,iOwner)
				return FMRES_SUPERCEDE
			}
			
		}
	}

	return FMRES_IGNORED;
}

public fw_PrimaryAttack(Ent)
{
	if(pev_valid(Ent) != 2)
		return HAM_IGNORED
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, Id))
		return HAM_IGNORED
		
	new isScanning = FindEnemy(Id, VOIDPISTOL_RADIUS)
	if(isScanning && get_pdata_int(Ent, 51, 4) > 0)
	{
		set_pdata_int(Ent, 51, max(0, get_pdata_int(Ent, 51, 4) - 1), 4);
		
		return HAM_SUPERCEDE;
	}
	Set_BitVar(g_Attack,Id)
	return HAM_IGNORED
}
public fw_PrimaryAttack_Post(Ent)
{
	if(pev_valid(Ent) != 2)
		return HAM_IGNORED
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, Id))
		return HAM_IGNORED
		
	set_pdata_float(Ent, 46, 0.2, 4);
	set_pdata_float(Ent, 47, 0.2, 4);
	set_pdata_float(Ent, 48, 1.3, 4);
	
	UnSet_BitVar(g_Attack,Id)
	return HAM_IGNORED
}
public fw_Item_PostFrame(ent)
{
	if(!pev_valid(ent))
		return HAM_IGNORED
	static id; id = pev(ent, pev_owner)
	if(!is_user_alive(id))
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, id))
		return HAM_IGNORED	
	
	new isScanning = FindEnemy(id, VOIDPISTOL_RADIUS)
	
	if(isScanning && pev(ent, pev_iuser2) == 0 && pev(ent, pev_iuser2) != 2)
	{
		set_pev(ent, pev_iuser2, 1)
		Set_WeaponAnim(id, 11)
		set_pdata_float(ent, 48, 1.5, 4)
	}
	else if(!isScanning && pev(ent, pev_iuser2) == 1 && pev(ent, pev_iuser2) != 2)
	{
		set_pev(ent, pev_iuser2, 0)
		Set_WeaponAnim(id, 12)
		set_pdata_float(ent, 48, 1.5, 4)
	}
	
	if(get_user_button(id) & IN_ATTACK && get_pdata_float(ent, 46, 4) <= 0.0 && get_pdata_int(ent, 51, 4) > 0)
	{
		set_pev(id, pev_button, pev(id, pev_button) &~ IN_ATTACK)
		if(isScanning)
		{
			new Float:flRecoil[3]; pev(id, pev_punchangle, flRecoil);
			flRecoil[0] -= 2.0
			set_pev(id, pev_punchangle, flRecoil);
				
			Set_BitVar(g_Attack,id)
			new iTotal = MakeBurstShot(id, VOIDPISTOL_RADIUS, get_pdata_int(ent, 51, 4))
			for(new x = 0; x < iTotal; x ++ )
				ExecuteHamB(Ham_Weapon_PrimaryAttack, ent)
			
			if(iTotal) emit_sound(id, CHAN_ITEM, WeaponSounds[5], 1.0, 0.8, 0, PITCH_NORM)
			UnSet_BitVar(g_Attack,id)
			Set_WeaponAnim(id, 3 + pev(ent, pev_iuser2))
			
			if(pev(ent, pev_iuser2) == 0) set_pev(ent, pev_iuser2, 1)
			
			set_pdata_float(ent, 46, 0.2, 4);
			set_pdata_float(ent, 47, 0.2, 4);
			set_pdata_float(ent, 48, 1.3, 4);
			
			engfunc(EngFunc_EmitSound, id, CHAN_WEAPON, WeaponSounds[0], 1.0, 0.6, 0, 100);
			
			if(!(pev(id, pev_flags) & FL_DUCKING)) SetAnimation(id, "ref_shoot_onehanded", 1.0)
			else SetAnimation(id, "crouch_shoot_onehanded", 1.0)
		} else {
			ExecuteHamB(Ham_Weapon_PrimaryAttack, ent)
		}
	}
	if(get_user_button(id) & IN_ATTACK2 && get_pdata_float(ent, 47, 4) <= 0.0 && pev(ent, pev_iuser2) == 2)
	{
		ShootBlackHoleProjectile(id)
		Set_WeaponAnim(id, isScanning ? 7 : 6)
		set_pev(ent, pev_iuser1, 0)
		set_pev(ent, pev_iuser2, isScanning ? 1 : 0)
		set_pdata_float(ent, 46, 1.0, 4)
		set_pdata_float(ent, 47, 1.0, 4)
		set_pdata_float(ent, 48, 1.5, 4)
		
		engfunc(EngFunc_EmitSound, id, CHAN_WEAPON, WeaponSounds[1], 1.0, 0.6, 0, 100);
		if(!(pev(id, pev_flags) & FL_DUCKING)) SetAnimation(id, "ref_shoot_onehanded", 1.0)
		else SetAnimation(id, "crouch_shoot_onehanded", 1.0)
	}
	static Float:flNextAttack; flNextAttack = get_pdata_float(id, 83, 5)
	static bpammo; bpammo = cs_get_user_bpammo(id, CSW_VOIDPISTOL)

	static iClip; iClip = get_pdata_int(ent, 51, 4)
	static fInReload; fInReload = get_pdata_int(ent, 54, 4)
	
	if(fInReload && flNextAttack <= 0.0)
	{
		static temp1
		temp1 = min(50 - iClip, bpammo)

		set_pdata_int(ent, 51, iClip + temp1, 4)
		cs_set_user_bpammo(id, CSW_VOIDPISTOL, bpammo - temp1)
		set_pdata_int(ent, 54, 0, 4)
		
		fInReload = 0
	}		
	
	return HAM_IGNORED
}
public fw_Weapon_WeaponIdle(Ent)
{
	if(pev_valid(Ent) != 2)
		return HAM_IGNORED
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, Id))
		return HAM_IGNORED
	
	if(get_pdata_float(Ent, 48, 4) <= 0.1)
	{
		Set_WeaponAnim(Id, pev(Ent, pev_iuser2))
		set_pdata_float(Ent, 48, 20.0, 4)
		return HAM_HANDLED;
	}
	return HAM_IGNORED
}

public fw_Item_AddToPlayer_Post(Ent, id)
{
	if(!pev_valid(Ent))
		return HAM_IGNORED
		
	if(pev(Ent, pev_impulse) == 2561)
	{
		Set_BitVar(g_HadWpn, id)
		set_pev(Ent, pev_impulse, 0)	
		
	}
	return HAM_HANDLED
}

public fw_Weapon_Reload(ent)
{
	static id; id = pev(ent, pev_owner)
	if(!is_user_alive(id))
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, id))
		return HAM_IGNORED	
		
	set_pev(ent, pev_iuser4, -1)
	
	static BPAmmo; BPAmmo = cs_get_user_bpammo(id, CSW_VOIDPISTOL)
	static iClip; iClip = get_pdata_int(ent, 51, 4)
		
	if(BPAmmo <= 0)
		return HAM_SUPERCEDE
	if(iClip >= 50)
		return HAM_SUPERCEDE			
	
	set_pev(ent, pev_iuser4, iClip)
	return HAM_HANDLED
}

public fw_Weapon_Reload_Post(ent)
{
	static id; id = pev(ent, pev_owner)
	if(!is_user_alive(id))
		return HAM_IGNORED
	if(!Get_BitVar(g_HadWpn, id))
		return HAM_IGNORED	
		
	if((get_pdata_int(ent, 54, 4) == 1))
	{ // Reload
		if(pev(ent, pev_iuser4) == -1)
			return HAM_IGNORED;
		set_pdata_float(id, 83, 2.65, 5)
		set_pdata_float(ent, 46, 3.0, 4)
		set_pdata_float(ent, 47, 3.0, 4)
		set_pdata_float(ent, 48, 3.85, 4)
		Set_WeaponAnim(id, 8 + pev(ent, pev_iuser2))
	}
	
	return HAM_HANDLED
}
public fw_Item_Deploy_Post(Ent)
{
	if(pev_valid(Ent) != 2)
		return
	static Id; Id = get_pdata_cbase(Ent, 41, 4)
	if(get_pdata_cbase(Id, 373) != Ent)
		return
		
	if(Get_BitVar(g_HadWpn, Id))
	{
		set_pev(Id, pev_viewmodel2, szVoidModels[1])
		set_pev(Id, pev_weaponmodel2, szVoidModels[0])
		
		new isScanning = FindEnemy(Id, VOIDPISTOL_RADIUS)
		if(pev(Ent, pev_iuser2) != 2) set_pev(Ent, pev_iuser2, 0)
		
		if(isScanning && pev(Ent, pev_iuser2) != 2) set_pev(Ent, pev_iuser2, 1)
		
		Set_WeaponAnim(Id, 15 + pev(Ent, pev_iuser2))
	}
}

public fw_UpdateClientData_Post(id, sendweapons, cd_handle)
{
	if(!is_user_alive(id))
		return FMRES_IGNORED	
	if(get_user_weapon(id) == CSW_VOIDPISTOL && Get_BitVar(g_HadWpn, id))
		set_cd(cd_handle, CD_flNextAttack, get_gametime() + 0.001) 
	
	return FMRES_HANDLED
}

public fw_PlaybackEvent(flags, invoker, eventid, Float:delay, Float:origin[3], Float:angles[3], Float:fparam1, Float:fparam2, iParam1, iParam2, bParam1, bParam2)
{
	if (!is_user_connected(invoker))
		return FMRES_IGNORED	
	if(get_user_weapon(invoker) != CSW_VOIDPISTOL || !Get_BitVar(g_HadWpn, invoker))
		return FMRES_IGNORED
	if(eventid != g_Event)
		return FMRES_IGNORED
	
	engfunc(EngFunc_PlaybackEvent, flags | FEV_HOSTONLY, invoker, eventid, delay, origin, angles, fparam1, fparam2, iParam1, iParam2, bParam1, bParam2)
	
	new iWpn = get_pdata_cbase(invoker, 373);
	if(!pev_valid(iWpn)) return FMRES_IGNORED
	
	new Float:origin[3]; pev(invoker, pev_origin, origin)
	Set_WeaponAnim(invoker, 3 + pev(iWpn, pev_iuser2))
	emit_sound(invoker, CHAN_WEAPON, WeaponSounds[0], 1.0, 0.6, 0, PITCH_NORM)
	
	return FMRES_SUPERCEDE
}
public ShootBlackHoleProjectile(id)
{
	new Float:vOrigin[3], Float:vUp[3], Float:vDir[3];
	pev(id, pev_origin, vOrigin);
	pev(id, pev_view_ofs, vUp)
	xs_vec_add(vOrigin, vUp, vOrigin);
	
	new pEnt = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
	set_pev(pEnt, pev_origin, vOrigin);
	set_pev(pEnt, pev_movetype, 5);
	set_pev(pEnt, pev_classname, "blackhole_projectile")
	set_pev(pEnt, pev_owner, id);
	
	engfunc(EngFunc_SetModel, pEnt, szProjectileModel[1])
	engfunc(EngFunc_SetSize, pEnt, Float:{-1.0, -1.0, -1.0}, Float:{1.0, 1.0, 1.0})
	
	set_pev(pEnt, pev_solid, SOLID_BBOX)
	set_pev(pEnt, pev_iuser1, 0)
	set_pev(pEnt, pev_nextthink, get_gametime() + 0.75)
	
	set_pev(pEnt, pev_animtime, get_gametime())
	set_pev(pEnt, pev_framerate, 1.0);
	
	velocity_by_aim(id, 1500, vDir);
	set_pev(pEnt, pev_velocity, vDir);
}
public BlackHoleThink(Ent)
{
	if(!isBlackHoles(Ent)) return;
	
	new Float:vOrigin[3], iType, pevOwner
	pevOwner = pev(Ent, pev_owner)
	iType = pev(Ent, pev_iuser1)

	if(iType < 1)
	{
		set_pev(Ent, pev_iuser1, 1);
		set_pev(Ent, pev_movetype, 0);
		set_pev(Ent, pev_velocity, Float:{0.0, 0.0, 0.0})
		set_pev(Ent, pev_nextthink, get_gametime());
		return
	}
	pev(Ent, pev_origin, vOrigin)
	
	switch(iType)
	{
		case 1: {
			engfunc(EngFunc_SetModel, Ent, szProjectileModel[0])
			set_pev(Ent, pev_animtime, get_gametime())
			set_pev(Ent, pev_framerate, 1.0);
			set_pev(Ent, pev_sequence, 0);
			
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
			write_byte(TE_EXPLOSION)
			engfunc(EngFunc_WriteCoord, vOrigin[0])
			engfunc(EngFunc_WriteCoord, vOrigin[1])
			engfunc(EngFunc_WriteCoord, vOrigin[2]-10.0)
			write_short(engfunc(EngFunc_ModelIndex, szProjectileModel[4]))
			write_byte(6)
			write_byte(30)
			write_byte(14)
			message_end()
				
			engfunc(EngFunc_EmitAmbientSound, Ent, vOrigin, WeaponSounds[2], 1.0, 0.6, 0, 100);
			set_pev(Ent, pev_iuser1, 2)
			set_pev(Ent, pev_nextthink, get_gametime() + 0.9);
		}
		case 2: {
			if(pev(Ent, pev_sequence) != 1)
			{
				set_pev(Ent, pev_animtime, get_gametime())
				set_pev(Ent, pev_framerate, 1.0);
				set_pev(Ent, pev_sequence, 1);
				set_pev(Ent, pev_dmgtime, get_gametime() + 6.0);
				set_pev(Ent, pev_fuser1, get_gametime() + 3.0);
				engfunc(EngFunc_EmitAmbientSound, Ent, vOrigin, WeaponSounds[3], 1.0, 0.6, 0, 100);
				
				message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
				write_byte(TE_SPRITE)
				engfunc(EngFunc_WriteCoord, vOrigin[0])
				engfunc(EngFunc_WriteCoord, vOrigin[1])
				engfunc(EngFunc_WriteCoord, vOrigin[2])
				write_short(engfunc(EngFunc_ModelIndex, szProjectileModel[2]))
				write_byte(6)
				write_byte(255)
				message_end()
			}
			if(pev(Ent, pev_fuser1) <= get_gametime())
			{
				engfunc(EngFunc_EmitAmbientSound, Ent, vOrigin, WeaponSounds[3], 1.0, 0.6, 0, 100);
				
				message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
				write_byte(TE_SPRITE)
				engfunc(EngFunc_WriteCoord, vOrigin[0])
				engfunc(EngFunc_WriteCoord, vOrigin[1])
				engfunc(EngFunc_WriteCoord, vOrigin[2])
				write_short(engfunc(EngFunc_ModelIndex, szProjectileModel[2]))
				write_byte(6)
				write_byte(255)
				message_end()
				
				set_pev(Ent, pev_fuser1, get_gametime() + 99.0);
			}
			if(!cs_zb_is_zombie(pevOwner))
			{
				PullEnemyIntoBlackholes(vOrigin, BLACKHOLE_RADIUS)
				DoRadiusDamage(pevOwner, Ent, vOrigin, BLACKHOLE_DAMAGE, BLACKHOLE_RADIUS)
			}
			set_pev(Ent, pev_nextthink, get_gametime() + 0.05)
			
			if(pev(Ent, pev_dmgtime) <= get_gametime())
			{
				set_pev(Ent, pev_iuser1, 3);
			}
		}
		case 3:
		{
			if(pev(Ent, pev_sequence) != 2)
			{
				set_pev(Ent, pev_animtime, get_gametime())
				set_pev(Ent, pev_framerate, 1.0);
				set_pev(Ent, pev_sequence, 2);
				set_pev(Ent, pev_iuser1, 4);
				set_pev(Ent, pev_nextthink, get_gametime() + 1.75)
				
				message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
				write_byte(TE_EXPLOSION)
				engfunc(EngFunc_WriteCoord, vOrigin[0])
				engfunc(EngFunc_WriteCoord, vOrigin[1])
				engfunc(EngFunc_WriteCoord, vOrigin[2]-10.0)
				write_short(engfunc(EngFunc_ModelIndex, szProjectileModel[3]))
				write_byte(6)
				write_byte(30)
				write_byte(14)
				message_end()
				
				engfunc(EngFunc_EmitAmbientSound, Ent, vOrigin, WeaponSounds[4], 1.0, 0.6, 0, 100);
			}
		}
		case 4:
		{
			engfunc(EngFunc_RemoveEntity, Ent);
		}
	}
}
public BlackHoleImpact(Ent, Id)
{
	if(!isBlackHoles(Ent))
		return;
		
	if(pev(Ent, pev_iuser1) < 1) set_pev(Ent, pev_iuser1, 1)
	set_pev(Ent, pev_nextthink, get_gametime())
	
	set_pev(Ent, pev_movetype, 0);
	set_pev(Ent, pev_velocity, Float:{0.0, 0.0, 0.0})
}
stock PullEnemyIntoBlackholes(Float:vOrigin[3], Float:flRadius)
{
	new Float:pOrigin[3], Float:vVelocity[3], Float:vDir[3];
	
	for(new x = 0; x < get_maxplayers(); x ++ )
	{
		if(!is_user_connected(x) || !is_user_alive(x) || !cs_zb_is_zombie(x))
			continue;
		
		pev(x, pev_origin, pOrigin);
		if(vector_distance(vOrigin, pOrigin) > flRadius)
			continue;
			
		xs_vec_sub(vOrigin, pOrigin, vDir)
		xs_vec_normalize(vDir, vDir)
		xs_vec_mul_scalar(vDir, 1000.0, vVelocity)
		set_pev(x, pev_velocity, vVelocity)
	}
}
stock DoRadiusDamage(pevAttacker, pevInflictor, Float:vOrigin[3], Float:flMaxDamage, Float:flRadius)
{
	new Float:flDist, Float:flDamage, Float:pOrigin[3], pEnt = -1
	while((pEnt = engfunc(EngFunc_FindEntityInSphere, pEnt, vOrigin, flRadius)) != 0)
	{
		if(!pev_valid(pEnt) || pEnt == pevAttacker) continue;
		
		pev(pEnt, pev_origin, pOrigin);
		flDist = vector_distance(pOrigin, vOrigin)
		flDamage = flMaxDamage - floatmul(flMaxDamage, floatdiv(flDist, flRadius));
		
		if(!isClearLine(pOrigin, vOrigin)) flDamage *= 0.6;
		if(flDamage <= 0.0 && isBreakable(pEnt))
			flDamage = floatdiv(flMaxDamage, 2.0)
		
		if(flDamage > 0.0 && pev(pEnt, pev_health) > 0.0) ExecuteHamB(Ham_TakeDamage, pEnt, pevInflictor, pevAttacker, flDamage, isBreakable(pEnt) ? DMG_BLAST : DMG_CLUB)
	}
}
stock MakeEffect(Float:vOrigin[3], Float:vDir[3])
{
	static Float:vEnd[3];
	xs_vec_mul_scalar(vDir, 3.0, vDir);
	xs_vec_add(vOrigin, vDir, vEnd)
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(15)
	engfunc(EngFunc_WriteCoord, vOrigin[0])
	engfunc(EngFunc_WriteCoord, vOrigin[1])
	engfunc(EngFunc_WriteCoord, vOrigin[2])
	engfunc(EngFunc_WriteCoord, vEnd[0])
	engfunc(EngFunc_WriteCoord, vEnd[1])
	engfunc(EngFunc_WriteCoord, vEnd[2])
	write_short(engfunc(EngFunc_ModelIndex, "sprites/ef_blackhole_star.spr"))
	write_byte(3)
	write_byte(1)
	write_byte(1)
	write_byte(10)
	write_byte(1)
	message_end()
}
stock isBlackHoles(iEnt)
{
	if (!pev_valid(iEnt)) return 0;
	
	new szClassname[32]
	pev(iEnt, pev_classname, szClassname, charsmax(szClassname))
	if (equal(szClassname, "blackhole_projectile")) return 1;
	return 0;
}
stock isBreakable(iEnt)
{
	if (!pev_valid(iEnt)) return 0;
	
	new szClassname[32]
	pev(iEnt, pev_classname, szClassname, charsmax(szClassname))
	if(pev(iEnt, pev_spawnflags) & SF_BREAK_TRIGGER_ONLY) return 0;
	
	if (equal(szClassname, "func_breakable") || equal(szClassname, "func_pushable")) return 1;
	return 0;
}
stock Make_BulletHole(Float:vecOrigin[3], iEnt)
{
	static szName[16]
	format(szName, 15, "{shot%i", random_num(1,5));
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(104)
	engfunc(EngFunc_WriteCoord, vecOrigin[0])
	engfunc(EngFunc_WriteCoord, vecOrigin[1])
	engfunc(EngFunc_WriteCoord, vecOrigin[2])
	write_byte(get_decal_index(szName))
	write_short(iEnt)
	message_end()
				
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(109)
	engfunc(EngFunc_WriteCoord, vecOrigin[0])
	engfunc(EngFunc_WriteCoord, vecOrigin[1])
	engfunc(EngFunc_WriteCoord, vecOrigin[2])
	write_short(iEnt)
	write_byte(get_decal_index(szName))
	message_end()
}
stock MakeBurstShot(id, Float:flRadius, iMax)
{
	new Float:vOrigin[3], Float:vUp[3], Float:pOrigin[3], Float:vDir[3], Float:vDist[3], Float:vEnd[3];
	pev(id, pev_origin, vOrigin);
	pev(id, pev_view_ofs, vUp)
	xs_vec_add(vOrigin, vUp, vOrigin);
	
	new Float:flFract, iTotal = 0
	new tr = create_tr2();
	
	for(new x = 0; x < get_maxplayers(); x ++ )
	{
		if(!is_user_connected(x) || !is_user_alive(x) || !cs_zb_is_zombie(x))
			continue;
		
		pev(x, pev_origin, pOrigin);
		if(vector_distance(vOrigin, pOrigin) > flRadius || !isClearLine(vOrigin, pOrigin))
			continue;
			
		xs_vec_sub(pOrigin, vOrigin, vDir);
		xs_vec_normalize(vDir, vDir);
		
		xs_vec_mul_scalar(vDir, 8192.0, vDist);
		xs_vec_add(vOrigin, vDist, vEnd);
		engfunc(EngFunc_TraceLine, vOrigin, vEnd, 0, id, tr);
		get_tr2(tr, TR_flFraction, flFract)
		if(flFract < 1.0)
		{
			rg_multidmg_clear();
			ExecuteHamB(Ham_TraceAttack, x, id, VOIDPISTOL_DAMAGE, vDir, tr, DMG_BULLET)
			rg_multidmg_apply(id, id)
		}
		iTotal ++
		if(iTotal >= iMax) break;
	}
	free_tr2(tr);
	
	return iTotal
}
stock FindEnemy(id, Float:flRadius)
{
	new Float:vOrigin[3], iTotal, Float:pOrigin[3]
	pev(id, pev_origin, vOrigin);
	for(new x = 0; x < get_maxplayers(); x ++ )
	{
		if(!is_user_connected(x) || !is_user_alive(x) || !cs_zb_is_zombie(x))
			continue;
		
		pev(x, pev_origin, pOrigin);
		if(vector_distance(vOrigin, pOrigin) > flRadius || !isClearLine(vOrigin, pOrigin))
			continue;
			
		iTotal ++
	}
	return iTotal
}
stock isClearLine(Float:vOrigin1[3], Float:vOrigin2[3])
{
	new Float:flFraction;
	engfunc(EngFunc_TraceLine, vOrigin1, vOrigin2, IGNORE_MONSTERS|IGNORE_GLASS, 0, 0);
	get_tr2(0, TR_flFraction, flFraction)
	
	if (flFraction < 1.0) return 0;

	return 1;
}
stock SetAnimation(id, const AnimName[], Float:rate=1.0)
{
	static AnimNum, Float:FrameRate, Float:GroundSpeed, bool:Loops
	if ((AnimNum=lookup_sequence(id,AnimName,FrameRate,Loops,GroundSpeed))==-1) AnimNum=0

	if (!Loops || (Loops && pev(id,pev_sequence)!=AnimNum))
	{
		set_pev(id, pev_gaitsequence, AnimNum)
		set_pev(id, pev_sequence, AnimNum)
		set_pev(id, pev_frame, 0.0)
		set_pev(id, pev_animtime, get_gametime())
	}
	set_pev(id, pev_framerate, rate)

	set_pdata_int(id, 40, Loops, 4)
	set_pdata_int(id, 39, 0, 4)

	set_pdata_float(id, 36, FrameRate, 4)
	set_pdata_float(id, 37, GroundSpeed, 4)
	set_pdata_float(id, 38, get_gametime(), 4)

	set_pdata_int(id, 73, 28, 5)
	set_pdata_int(id, 74, 28, 5)
	set_pdata_float(id, 220, get_gametime(), 5)
}
stock drop_weapons(id, dropwhat)
{
	// Get user weapons
	static weapons[32], num, i, weaponid
	num = 0 // reset passed weapons count (bugfix)
	get_user_weapons(id, weapons, num)
	
	const PRIMARY_WEAPONS_BIT_SUM = (1<<CSW_SCOUT)|(1<<CSW_XM1014)|(1<<CSW_MAC10)|(1<<CSW_AUG)|(1<<CSW_UMP45)|(1<<CSW_SG550)|(1<<CSW_GALIL)|(1<<CSW_FAMAS)|(1<<CSW_AWP)|(1<<CSW_MP5NAVY)|(1<<CSW_M249)|(1<<CSW_M3)|(1<<CSW_M4A1)|(1<<CSW_TMP)|(1<<CSW_G3SG1)|(1<<CSW_SG552)|(1<<CSW_AK47)|(1<<CSW_P90)
	const SECONDARY_WEAPONS_BIT_SUM = (1<<CSW_P228)|(1<<CSW_ELITE)|(1<<CSW_FIVESEVEN)|(1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)

	// Loop through them and drop primaries or secondaries
	for (i = 0; i < num; i++)
	{
		// Prevent re-indexing the array
		weaponid = weapons[i]
		
		if ((dropwhat == 1 && ((1<<weaponid) & PRIMARY_WEAPONS_BIT_SUM)) || (dropwhat == 2 && ((1<<weaponid) & SECONDARY_WEAPONS_BIT_SUM)))
		{
			// Get weapon entity
			static wname[32]; get_weaponname(weaponid, wname, charsmax(wname))
			engclient_cmd(id, "drop", wname)
		}
	}
}
stock Set_WeaponAnim(id, anim)
{
	set_pev(id, pev_weaponanim, anim)
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, {0, 0, 0}, id)
	write_byte(anim)
	write_byte(0)
	message_end()
}
